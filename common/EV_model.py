# -*- coding: utf-8 -*-
"""
the Model of EV
"""

import numpy as np
from scipy.interpolate import interp1d, interp2d
import math
import scipy.io as scio
import matplotlib.pyplot as plt

class EV_model:
    def __init__(self):
        # parameters of car
        self.Wheel_R = 0.334  ####车轮半径m
        self.mass = 1682  ####质量
        self.C_roll = 0.01  ####滚动阻力
        self.density_air = 1.2  ####空气密度
        self.area_frontal = 2.6  ####迎风面积
        self.G = 9.81  ####重力加速度
        self.C_d = 0.35  ####空气阻力系数
        self.RPM_2_rads = 2. * math.pi / 60
        self.G_f = 8.206  # Final reducer ratio
        # motor
        Mot_w_list = [0.0, 40.201005025125674, 80.4020100502512, 120.60301507537687, 160.80402010050184, 201.00502512562767,
         241.20603015075343, 281.4070351758793, 321.6080402010051, 361.8090452261309, 402.0100502512567,
         442.2110552763825, 482.41206030150687, 522.6130653266327, 562.8140703517586, 603.0150753768843,
         643.2160804020102, 683.417085427136, 723.6180904522618, 763.8190954773877, 804.020100502512, 844.2211055276377,
         884.4221105527636, 924.6231155778894, 964.8241206030153, 1005.0251256281412, 1045.226130653267,
         1085.4271356783927, 1125.6281407035171, 1165.8291457286427, 1206.0301507537686, 1246.2311557788946,
         1286.4321608040204, 1326.6331658291463, 1366.834170854272, 1407.0351758793965, 1447.2361809045221,
         1487.4371859296436, 1527.638190954778, 1567.8391959798982, 1608.0402010050182, 1648.2412060301526,
         1688.442211055273, 1728.6432160804072, 1768.8442211055271, 1809.045226130647, 1849.246231155782,
         1889.4472361809019, 1929.6482412060363, 1969.8492462311563, 2010.0502512562762, 2050.251256281411,
         2090.452261306531, 2130.6532663316657, 2170.8542713567854, 2211.0552763819055, 2251.2562814070398,
         2291.45728643216, 2331.65829145728, 2371.8592964824147, 2412.0603015075344, 2452.261306532669,
         2492.4623115577892, 2532.663316582909, 2572.864321608044, 2613.0653266331637, 2653.266331658298,
         2693.467336683418, 2733.6683417085383, 2773.8693467336725, 2814.070351758793, 2854.271356783913,
         2894.472361809047, 2934.673366834167, 2974.874371859302, 3015.075376884422, 3055.2763819095417,
         3095.477386934676, 3135.6783919597965, 3175.8793969849316, 3216.080402010051, 3256.2814070351706,
         3296.4824120603053, 3336.6834170854254, 3376.88442211056, 3417.08542713568, 3457.2864321608004,
         3497.487437185934, 3537.6884422110543, 3577.8894472361744, 3618.090452261309, 3658.291457286429,
         3698.492462311564, 3738.6934673366836, 3778.8944723618038, 3819.095477386938, 3859.2964824120577,
         3899.497487437193, 3939.6984924623125, 3979.8994974874327, 4020.1005025125673, 4060.3015075376875,
         4100.502512562822, 4140.703517587942, 4180.904522613062, 4221.105527638197, 4261.306532663316,
         4301.507537688436, 4341.708542713571, 4381.909547738691, 4422.110552763826, 4462.311557788946,
         4502.512562814066, 4542.7135678392, 4582.91457286432, 4623.115577889454, 4663.316582914575, 4703.517587939695,
         4743.718592964829, 4783.91959798995, 4824.120603015069, 4864.3216080402035, 4904.522613065324,
         4944.723618090458, 4984.9246231155785, 5025.125628140698, 5065.326633165832, 5105.5276381909525,
         5145.728643216088, 5185.929648241207, 5226.1306532663275, 5266.331658291462, 5306.532663316581,
         5346.733668341716, 5386.934673366836, 5427.135678391956, 5467.336683417091, 5507.53768844221, 5547.73869346733,
         5587.939698492465, 5628.140703517586, 5668.34170854272, 5708.54271356784, 5748.74371859296, 5788.944723618094,
         5829.145728643214, 5869.346733668349, 5909.54773869347, 5949.748743718589, 5989.949748743724,
         6030.150753768844, 6070.351758793963, 6110.552763819099, 6150.753768844218, 6190.954773869352,
         6231.155778894472, 6271.356783919593, 6311.557788944728, 6351.758793969848, 6391.9597989949825,
         6432.160804020102, 6472.361809045221, 6512.562814070357, 6552.763819095476, 6592.964824120596,
         6633.165829145731, 6673.366834170851, 6713.567839195985, 6753.768844221106, 6793.969849246226,
         6834.17085427136, 6874.371859296481, 6914.572864321615, 6954.773869346735, 6994.974874371856,
         7035.175879396988, 7075.376884422109, 7115.577889447243, 7155.778894472363, 7195.9798994974835,
         7236.180904522618, 7276.381909547739, 7316.582914572858, 7356.783919597993, 7396.984924623112,
         7437.185929648248, 7477.386934673367, 7517.587939698487, 7557.788944723621, 7597.989949748741,
         7638.190954773876, 7678.391959798996, 7718.592964824115, 7758.793969849252, 7798.994974874372,
         7839.195979899505, 7879.396984924625, 7919.597989949745, 7959.79899497488, 8000.0]
        Mot_w_list = [i * 72 / 60 * self.RPM_2_rads for i in Mot_w_list]  ####单位转换
        Mot_w_list = np.array(Mot_w_list)
        Mot_t_list = [-393.8509929906542, -389.88710315596654, -385.9232133212794, -381.9593234865917, -377.99543365190453,
         -374.03154381721686, -370.06765398252963, -366.103764147842, -362.1398743131543, -358.17598447846717,
         -354.21209464377944, -350.24820480909233, -346.2843149744046, -342.3204251397174, -338.35653530502975,
         -334.39264547034253, -330.4287556356549, -326.46486580096723, -322.50097596628007, -318.5370861315924,
         -314.5731962969052, -310.60930646221755, -306.6454166275303, -302.68152679284265, -298.7176369581555,
         -294.7537471234678, -290.78985728878064, -286.82596745409296, -282.86207761940534, -278.8981877847181,
         -274.93429795003044, -270.9704081153433, -267.0065182806556, -263.0426284459679, -259.07873861128076,
         -255.1148487765931, -251.1509589419059, -247.1870691072183, -243.22317927253104, -239.2592894378434,
         -235.2953996031562, -231.33150976846855, -227.36761993378087, -223.4037300990937, -219.43984026440603,
         -215.47595042971886, -211.5120605950312, -207.54817076034396, -203.58428092565632, -199.62039109096867,
         -195.65650125628147, -191.69261142159382, -187.72872158690663, -183.76483175221895, -179.8009419175318,
         -175.8370520828441, -171.87316224815692, -167.90927241346924, -163.9453825787816, -159.9814927440944,
         -156.01760290940675, -152.05371307471955, -148.08982324003188, -144.12593340534468, -140.16204357065703,
         -136.19815373596984, -132.2342639012822, -128.2703740665945, -124.30648423190732, -120.34259439721966,
         -116.37870456253248, -112.4148147278448, -108.45092489315762, -104.48703505846996, -100.5231452237823,
         -96.5592553890951, -92.59536555440745, -88.63147571972026, -84.6675858850326, -80.70369605034539,
         -76.73980621565774, -72.77591638097009, -68.8120265462829, -64.84813671159523, -60.88424687690804,
         -56.92035704222037, -52.95646720753318, -48.99257737284552, -45.028687538158096, -41.06479770347067,
         -37.100907868783196, -33.13701803409577, -29.17312819940829, -25.209238364720818, -21.24534853003339,
         -17.281458695345922, -13.317568860658492, -9.353679025970974, -5.389789191283546, -1.4258993565960916,
         2.5379904780913543, 6.501880312778873, 10.465770147466301, 14.429659982153682, 18.39354981684115,
         22.357439651528626, 26.3213294862161, 30.28521932090353, 34.24910915559096, 38.21299899027847,
         42.17688882496589, 46.14077865965337, 50.10466849434084, 54.06855832902804, 58.0324481637157,
         61.99633799840336, 65.96022783309056, 69.92411766777822, 73.88800750246541, 77.85189733715308,
         81.81578717184026, 85.77967700652792, 89.74356684121558, 93.70745667590278, 97.67134651059042,
         101.63523634527762, 105.5991261799653, 109.56301601465296, 113.52690584934014, 117.4907956840278,
         121.454685518715, 125.41857535340266, 129.38246518808984, 133.3463550227775, 137.3102448574647,
         141.27413469215236, 145.23802452683955, 149.20191436152723, 153.16580419621442, 157.12969403090204,
         161.09358386558972, 165.05747370027692, 169.0213635349646, 172.98525336965176, 176.94914320433944,
         180.91303303902666, 184.8769228737143, 188.84081270840193, 192.80470254308912, 196.76859237777677,
         200.732482212464, 204.69637204715164, 208.66026188183932, 212.62415171652648, 216.5880415512142,
         220.55193138590138, 224.515821220589, 228.47971105527623, 232.44360088996388, 236.4074907246515,
         240.37138055933875, 244.33527039402642, 248.2991602287136, 252.26305006340127, 256.22693989808846,
         260.1908297327761, 264.15471956746325, 268.1186094021509, 272.08249923683854, 276.0463890715258,
         280.0102789062135, 283.97416874090067, 287.93805857558834, 291.9019484102755, 295.8658382449632,
         299.8297280796504, 303.79361791433803, 307.75750774902565, 311.72139758371287, 315.6852874184005,
         319.6491772530877, 323.61306708777533, 327.57695692246256, 331.5408467571502, 335.5047365918379,
         339.46862642652513, 343.43251626121275, 347.3964060959, 351.3602959305876, 355.3241857652748,
         359.28807559996244, 363.25196543464966, 367.21585526933734, 371.17974510402496, 375.1436349387122,
         379.1075247733998, 383.071414608087, 387.03530444277465, 390.99919427746187, 394.9630841121495]
        Mot_t_list = [i * 320 / 830 for i in Mot_t_list]
        Mot_t_list = np.array(Mot_t_list)
        Mot_w_maxlist = [0.0, 385.87, 1005.31]####角速度，静止中速急速
        Mot_t_maxlist = [150.55, 150.72, 74.42]
        Mot_w_minlist = [0.0, 15.78, 46.25, 66.62, 76.51, 86.69,
         88.73, 90.19, 123.64, 189.10, 324.36,344.73, 386.91, 696.73, 1005.09] ####对应不用运行状态下的急速
        Mot_t_minlist = [0.0, -25.38, -73.83, -108.44, -124.59, -140.74,
         -149.25, -149.69, -150.11, -150.20, -150.24,-147.20, -145.95, -110.46, -74.06]
        data_path = 'motor_eff1.mat'
        data = scio.loadmat(data_path)
        Mot_eta_map = data['bm'] / 100
        Mot_eta_map = np.array(Mot_eta_map)
        self.Mot_eta_map_func = interp2d(Mot_w_list, Mot_t_list, Mot_eta_map)
        self.Mot_mintrq_func = interp1d(Mot_w_minlist, Mot_t_minlist, kind='linear', fill_value='extrapolate')
        self.Mot_maxtrq_func = interp1d(Mot_w_maxlist, Mot_t_maxlist, kind='linear', fill_value='extrapolate')
        # Battery
        # SoC
        SOC_list = [0.0, 0.0013276828526495221, 0.05747227518600216, 0.10702683656467868, 0.15658198532321146,
         0.20613619323349686, 0.2556890509192016, 0.3052414165937667, 0.35479690137941794, 0.4044785599947899,
         0.45403284681606515, 0.5035869641021783, 0.5531391642990974, 0.6026897962045891, 0.6522431151166549,
         0.7017982992999449, 0.7513519739240191, 0.8009060973335251, 0.8505933496523284, 0.9002992450358487,
         0.9501318379645827, 0.9999014580425535, 1.0]
        # Discharging resistance
        R_dis = [0.313961880868339, 0.31395626254478715, 0.3139581145196004, 0.2420765188779618, 0.2308051490380216,
         0.21289250057801926, 0.19671977332565002, 0.19198481830646397, 0.1822797930987823, 0.17661580988523742,
         0.17301559070542832, 0.17260847027846607, 0.17779329361093152, 0.18815651036522912, 0.21206064871767705,
         0.2184216094715594, 0.21184375379204531, 0.20383423088752334, 0.1970468732429532, 0.19447704229244975,
         0.21838801975004635, 0.2964788155340144, 0.29648354151806067]
        # R_dis = [i*0.1 for i in R_dis]
        # Open circuit voltage
        V_oc = [320.1086568631579, 320.1086568631579, 336.42484124210523, 338.9326840421053, 342.3459482526316,
         345.18958048421047, 347.5846991368421, 350.05655235789476, 351.4930563157895, 352.64470863157896,
         353.8213054105263, 355.15388911578947, 356.8088129052632, 359.14211747368427, 362.6861001473684,
         366.24687631578945, 369.7071055578947, 373.41503715789474, 377.37025913684215, 381.5487591157895,
         386.04154465263156, 391.1863202526315, 391.1863202526315]
        self.R_dis_func = interp1d(SOC_list, R_dis, kind='linear', fill_value='extrapolate')
        self.V_func = interp1d(SOC_list, V_oc, kind='linear', fill_value='extrapolate')

    def run(self, car_spd, car_a, SOC):
        W_axle = car_spd / self.Wheel_R * self.G_f
        acc = car_a
        if car_spd > 0:
            T_axle = self.Wheel_R / self.G_f * (self.mass * acc + self.mass * self.G * self.C_roll * (car_spd > 0) +
                                                0.5 * self.density_air * self.area_frontal * self.C_d * (
                                                        car_spd ** 2))  # Nm
        else:
            T_axle = self.Wheel_R / self.G_f * (0.5 * self.density_air * self.area_frontal * self.C_d * (
                    car_spd ** 2))  # Nm
        P_axle = T_axle * W_axle
        # Motor
        T_mot = T_axle
        W_mot = W_axle
        # Motor s.t.
        if T_mot < 0:
            T_mot_edge = self.Mot_mintrq_func(abs(W_mot))
        else:
            T_mot_edge = self.Mot_maxtrq_func(abs(W_mot))
        T_mot = (T_mot < 0) * ((T_mot <= T_mot_edge) * T_mot_edge + (T_mot > T_mot_edge) * T_mot) + (T_mot >= 0) * (
                (T_mot <= T_mot_edge) * T_mot
                + (T_mot > T_mot_edge) * T_mot_edge)
        # efficiency of the electric motor
        Mot_eff = (W_mot == 0) + (W_mot != 0) * self.Mot_eta_map_func(W_mot, T_mot * np.ones(1))
        Mot_eff[np.isnan(Mot_eff)] = 1
        # Calculate power consumption
        if Mot_eff == 0:
            P_mot = 0
        else:
            P_mot = (T_mot * W_mot <= 0) * (-W_mot * T_mot * Mot_eff) + (T_mot * W_mot > 0) * (W_mot * T_mot / Mot_eff)
        # Battery
        P_batt = P_mot
        Q_batt = 180 * 3600
        # Battery efficiency
        e_batt = 1
        # Battery internal resistance
        r = self.R_dis_func(SOC)
        # Battery voltage
        V_batt = self.V_func(SOC)
        # Battery current
        if V_batt ** 2 <= 4 * r * P_batt:
            I_batt = e_batt * V_batt / (2 * r)
        #        print('battery power is out of bound')
        else:
            I_batt = (V_batt - math.sqrt(V_batt ** 2 - 4 * r * P_batt)) / (2 * r)
            # I_batt = (V_batt - math.sqrt(V_batt ** 2 - 4 * r * P_batt)) / 0.8
        if I_batt > 460:
            I_batt = 460
        # New SoC
        SOC_delta = I_batt / Q_batt
        # SOC_new = SOC - SOC_delta
        # SOC_new = (np.conjugate(SOC_new) + SOC_new) / 2
        Q_batt_consume = SOC_delta * 64

        out_info = {'P_mot': P_mot, 'V_batt': V_batt, 'I_batt': I_batt, 'SOC_delta': SOC_delta}
        return Q_batt_consume, SOC_delta, out_info
    # 返回的SOC - SOC_new是一个正数，表示消耗了多少SOC；SOC_delta为正表示消耗电量，为负表示电能回收


if __name__ == '__main__':
    #####测试用代码
    time_list = []
    soc_list = []
    next_soc_new = 1
    T_mot_list = []
    W_mot_list = []
    data_path_cycle = 'FTP75-2.mat'
    # data_path_cycle = 'Standard_NEDC.mat'
    data = scio.loadmat(data_path_cycle)
    speed_list = data['speed_vector'][0]
    length = len(speed_list)
    v_list = []
    # for i in range(500):
    for m in range(length):
        v = speed_list[m]
        if m + 1 == length:
            a = speed_list[-1] - v
        else:
            a = speed_list[m + 1] - v
        v_list.append(v)
        next_soc_new,T_mot, W_mot = EV_model().run(car_spd=v, car_a=a, SOC=next_soc_new)
        time_list.append(sum(v_list))
        soc_list.append(next_soc_new)
        T_mot_list.append(T_mot)
        W_mot_list.append(W_mot / 72 * 60 / 2 / 3.1415926 * 60)
        if soc_list[-1] <= 0.1:
            break
    plt.plot(time_list, soc_list, c='b')  ####里程-soc
    plt.show()
    plt.plot(time_list, T_mot_list, c='b')  ####里程-扭矩
    plt.show()
    plt.plot(time_list, W_mot_list, c='r')  #####里程-转速
    plt.show()
    plt.plot(time_list, v_list, c='r')  ####里程-速度
    plt.show()
    print(sum(v_list)/1000)  ####工况里程
    print(soc_list[-1])  ####soc终值
    print((1-soc_list[-1])*64/(sum(v_list)/100000))  ####当前工况下百公里电耗（千瓦时）
    print(((sum(v_list)/1000)/((1-soc_list[-1])*64)))  ####当前工况下每千瓦时对应续航
